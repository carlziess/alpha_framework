#!/usr/bin/env php
<?php

echo (<<<USAGE
Usage:
{$argv[0]}  [ApplicationPath]

USAGE
);

$config = require(__DIR__ . '/config.php');
$author 	= trim(`whoami`);
$hostname 	= trim(`hostname`);
$server_name = pathinfo($config['host']);
$conf= [ 
    'AUTHOR' 	=> $author,//开发人员
    'APP_NAME' 	=> $config['application_name'] ? $config['application_name'] : 'demo-v1',//app名字,请确保这也是一个合法的文件夹名
    'DEV_PC' 	=> $author . '@' . $hostname ,//开发机,用于生产makefile自动部署
    'YLP'       => $config['yaf_library_path'],
    'APP_PATH'  => $config['application_path'],
    'ALP'       => $config['application_library_path'],
    'TPLCACHE'  => $config['tmplate_cache_path'],
    'HOST'      => $config['host'],
    'NGINX_SERVER_NAME'     =>  $server_name['basename'],
];
if (empty($argv[1])) {
	$app_path = dirname(__FILE__) . "/output/{$conf['APP_NAME']}";
} else {
	$app_path = rtrim($argv[1], '/\\');
}

define('INPUT_DIR', dirname(__FILE__).'/templates');

$strOutputRoot = $app_path;
if (file_exists($strOutputRoot)) {
    rename($strOutputRoot, $strOutputRoot.date('Y-m-d-H-i-s', time()));
}

$arrTpls = getAllTpls();
foreach($arrTpls as $strFultTplPath) {
    $strContent = processTemplates($strFultTplPath);
    $strRelativeTplPath = substr($strFultTplPath, strlen(INPUT_DIR)+1);
    $strOutputRelativePath = convertPath($strRelativeTplPath);
    $strOutputPath = $strOutputRoot.'/'.$strOutputRelativePath;
    $strOutputDir = dirname($strOutputPath);
    if (!file_exists($strOutputDir)) {
        mkdir($strOutputDir, 0777, true);
    }
    file_put_contents($strOutputPath, $strContent);    
}

echo "DONE\n";

//获取所有的代码模板文件
function getAllTpls() {
	$intFirst = 0;
    $intLast = 1;
    $arrQueue = array(INPUT_DIR);
    $arrFiles = array ();
    while ($intFirst < $intLast) {
		$strPath = $arrQueue[$intFirst++];
		if (!is_dir($strPath)) {
			if (file_exists($strPath)) {
			    $arrSep = explode('.', $strPath);
			    //只取.tpl文件
			    if ($arrSep[count($arrSep) - 1] == 'tpl') {
				    array_push($arrFiles, $strPath);   
			    }
			}
		} else {
			$arrPaths = scandir($strPath);
			if (count($arrPaths) == 0) {
				continue;
			}
            foreach ($arrPaths as $strSubPath) {
				if ($strSubPath === '.' || $strSubPath === '..') {
					continue;
				}
				$strCurPath = $strPath.'/'.$strSubPath;
				$arrQueue[$intLast++] = $strCurPath;
			}   
        }   
    }
	return $arrFiles;
} 

//将模板文件名转换成输出的文件名
function convertPath($strPath) {
    global $conf;
    //去掉模板后缀
    $strPath = str_replace('.tpl', '', $strPath);
    $arrSep = explode('.', $strPath);
    $bolIsPhp = false;
    if ($arrSep[count($arrSep) - 1] == 'php') {
	   $bolIsPhp = true;
    }
    //替换文件名中的模板变量
    $strToFind = '$APP_NAME$';
    $strToRelace = $bolIsPhp? ucfirst($conf['APP_NAME']) : $conf['APP_NAME'];
    $strPath = str_replace($strToFind, $strToRelace, $strPath);
    return $strPath;
}

//以后如果需要，可以用smarty等复杂的模板引擎来处理
function processTemplates($strTpl) {
    $strContent = file_get_contents($strTpl);
    $arrSearch = array();
    $arrReplace = array();
    global $conf;
    foreach($conf as $strKey => $strValue) {
        $arrSearch[] = '{&$'.$strKey.'&}';
        $arrReplace[] = $strValue;
    }
    $strResult = str_replace($arrSearch, $arrReplace, $strContent);
    return $strResult;
}
